import java.util.ArrayList;
import java.util.Arrays;

public class Main {

	public static void main(String[] args) {
		FormatClass formatClass = new FormatClass();
		int[] ints;
		ArrayList<int[]> list = new ArrayList<>();

		ints = new int[] { 0x5A, 0xA5, 0x11, 0xF0, 0x48, 0x69, 0x77, 0x6F, 0x72, 0x6C, 0x64, 0x2D, 0x32, 0x30, 0x31,
				0x36, 0x30, 0x33, 0x32, 0x35, 0x4D, 0xE6 };

		list.add(ints);
//		ints = new int[] { 0x5A, 0xA5, 0x11, 0xF0, 0x48, 0x69, 0x77, };
//
//		list.add(ints);
//		ints = new int[] { 0x6F, 0x72, 0x6C, 0x64, 0x2D, 0x32, 0x30, 0x31, 0x36, 0x30, 0x33, 0x32, 0x35, 0x4D, 0xE6 };
//
//		list.add(ints);
//		ints = new int[] { 0x5A, 0xA5, 0x0A, 0x12, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x00, 0x0A, 0x08, 0x0A, 0x5F,
//				0x5A, 0xA5, 0x0A, 0x12, 0x00, 0x00, };
//		list.add(ints);
//		ints = new int[] { 0x00, 0x00, 0x08, 0x00, 0x00, 0x0A, 0x08, 0x0A, 0x3F, 0x5A, 0xA5, 0x0A, 0x12, 0x00, 0x00,
//				0x80, 0x00, 0x08, 0x00, 0x00, 0x0A, 0x08, 0x0A, 0xBF, 0x5A, 0xA5, 0x0A, 0x12, 0x00, 0x00, 0x00, 0x00,
//				0x08, 0x00, 0x00, 0x0A, };
//		list.add(ints);
//		ints = new int[] { 0x08, 0x0A, 0x3F, 0x5A, 0xA5, 0x0A, 0x12, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x0A,
//				0x08, 0x0A, 0x47, 0x5A, 0xA5, 0x0A, 0x12, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x0A, 0x08, 0x0A,
//				0x3F, 0x5A, 0xA5, 0x0A, };
//		list.add(ints);
//		ints = new int[] { 0x12, 0x00, 0x00, 0x00, 0x00, 0x08, 0x80, 0x00, 0x0A, 0x08, 0x0A, 0xBF, 0x5A, 0xA5, 0x0A,
//				0x12, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x0A, 0x08, 0x0A, 0x3F, 0x5A, 0xA5, 0x0A, 0x12, 0x00,
//				0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x0A, 0x08, 0x0A, 0x5F };
//		list.add(ints);

		ints = new int[] {0x5A, 0xA5, 0x0A, 0x12, 0x00, 0x00, 0x00, 0x00,  };
		list.add(ints);
		
		ints = new int[] {0x08, 0x00, 0xA0, 0x0A, 0x08, 
				0x0A, 0xDF, 0x5A, 0xA5, 0x11, 0xF0, 0x48, 0x69, 0x77, 0x6F, 0x72, 0x6C, 0x64, 0x2D, 0x32, 
				0x30, 0x31, 0x36, 0x30, 0x33, 0x32, 0x35, 0x4D, 0xE6, 0x5A, 0xA5, 0x11, 0xF0, 0x48, 0x69, 
				0x77, 0x6F, 0x72, 0x6C, 0x64, 0x2D, 0x32, 0x30, 0x31, 0x36, 0x30, 0x33, 0x32, 0x35, 0x4D,
				0xE6, 0x5A, 0xA5, 0x14, 0x1F, 0x41, 0x42, 0x43, 0x44, 0x2D, 0x61, 0x62, 0x63, 0x64, 0x2B, 
				0x31, 0x32, 0x33, 0x34, 0x21, 0x3F, 0x5A, 0x59, 0x58, 0x00, 0x53, 0x5A, 0xA5, 0x14, 0x1F,
				0x41, 0x42, 0x43, 0x44, 0x2D, 0x61, 0x62, 0x63, 0x64, 0x2B, 0x31, 0x32, 0x33, 0x34, 0x21, 
				0x3F, 0x5A, 0x59, 0x58, 0x00, 0x53};
		list.add(ints);
		
		

//		for (int i = 0; i < 15; i++) 
		{
			for (int[] is : list) {
				try {

					formatClass.onReceiver(is);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
	}

	public static class FormatClass {
		private int mSize, mFrameStartIndex, mCheckSumIndex;
		private int[] DATA = new int[1024];

		private void onReceiver(int[] data) {
			 System.out.println("origin data: " + toHexString(data));
			if (mSize + data.length > 1024) {
				mSize = mFrameStartIndex = mCheckSumIndex = 0;
			}
			System.arraycopy(data, 0, DATA, mSize, data.length);
			mSize += data.length;

			// 上次处理已经定位到校验码位置， 但是有效数据不足
			if (mCheckSumIndex != 0) {
				if (mCheckSumIndex >= mSize)
					return;

				if (checkOk(DATA, 0)) {
					onHandler(DATA, 0, DATA[2] + 5);
					mFrameStartIndex = DATA[2] + 5 /* + 1 */;
				} else {
					mFrameStartIndex++;
				}
			}

			mCheckSumIndex = 0;
			 System.out.println(" . " + mFrameStartIndex + ", " + mCheckSumIndex + ", " +
			 mSize);

			for (int end = mSize; mFrameStartIndex < end; ++mFrameStartIndex) {
				if (isHead(DATA, mFrameStartIndex)) {
					mCheckSumIndex = DATA[mFrameStartIndex + 2];
					if (mCheckSumIndex > 512) {
						mCheckSumIndex = 0;
						continue;
					}

					mCheckSumIndex += mFrameStartIndex + 4;
					if (mCheckSumIndex > mSize) {
						mCheckSumIndex -= mFrameStartIndex;
						break;
					}
 
					if (checkOk(DATA, mFrameStartIndex)) {
						onHandler(DATA, mFrameStartIndex + 0, DATA[mFrameStartIndex + 2] + 5);
						mFrameStartIndex = mCheckSumIndex;
					} else {
						mFrameStartIndex++;
					}
					mCheckSumIndex = 0;
				}

			}

			if (mFrameStartIndex != 0) {
				mSize -= mFrameStartIndex;
				if (mSize != 0) {
					System.arraycopy(DATA, mFrameStartIndex, DATA, 0, mSize);
					Arrays.fill(DATA, mSize, DATA.length, 0);
				}
				mFrameStartIndex = 0;
			}
		}

		private void onHandler(int[] ints, int start, int len) {
			System.out.println(" +++YYY+++++ onHandler " + toHexString(ints, start, len));
		}

		private boolean isHead(int[] ints, int index) {
			return ints[index] == 0x5A && ints[index + 1] == 0xA5;
		}

		private boolean checkOk(int[] dd, int start) { 
			byte chck = 0;
			int len = dd[start + 2];
			for (int i = 0; i < len  + 2; i++) {
				chck += (byte) dd[start + 2 + i];
			}
			chck = (byte) ((chck - 1) & 0xFF);
			byte chkSum = (byte) dd[start + len + 4];
			System.out.println(" chk start " + start  +" : "+ chck + "/" + chkSum);
			return chck == chkSum;
		}

		public String toHexString(int[] bytes, int start, int len) {
			int[] copyOfRange = Arrays.copyOfRange(bytes, start, start + len);
			return toHexString(copyOfRange);
		}

		public String toHexString(int[] bytes) {
			StringBuffer buffer = new StringBuffer();
			for (int i : bytes) {
				String s = Integer.toHexString(i & 0xFF).toUpperCase();
				if (s.length() == 1)
					s = "0" + s;
				buffer.append(s + " ");
			}
			return buffer.toString();
		}
	}
}
