package com.java.demo;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Main {

	public static void main(String[] args) {

//		testThreadJoin();
		
//		testThreadPool();

		 testFormatDatas();
	}

	private static void testThreadPool() {
		ExecutorService executorService = Executors.newSingleThreadExecutor();
		
		Runnable M1 = new Runnable() {
			@Override
			public void run() {
				int max = 50;
				while (max > 0) {
					System.out.println("AAAA run  " + max);
					max--;
				}
				
			}
		};
		
		Runnable M2 = new Runnable() {
			
			@Override
			public void run() {
				int max = 50;
				while (max > 0) {
					System.out.println("BBBBB run  " + max);
					max--;
				}
				
			}
		};
		executorService.execute(M1);
		executorService.execute(M2);
	}

	private static void testThreadJoin() {

		A parent = new A();
		B child = new B();
		parent.start();
		try {
			parent.join();
			child.start();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	public static class A extends Thread {
		@Override
		public void run() {
			int max = 20;
			while (max > 0) {
				System.out.println("AAAA run  " + max);
				max--;
			}
		}
	}

	public static class B extends Thread {
		@Override
		public void run() {
			int max = 20;
			while (max > 0) {
				System.out.println("BBBB run  " + max);
				max--;
			}
		}
	}

	private static void testFormatDatas() {
		FormatClass formatClass = new FormatClass();
		int[] ints;
		ArrayList<int[]> list = new ArrayList<>();

		ints = new int[] { 0x5A, 0xA5, 0x11, 0xF0, 0x48, 0x69, 0x77, 0x6F, 0x72, 0x6C, 0x64, 0x2D, 0x32, 0x30, 0x31,
				0x36, 0x30, 0x33, 0x32, 0x35, 0x4D, 0xE6 };

		list.add(ints);
//		ints = new int[] { 0x5A, 0xA5, 0x0A, 0x12, 0x00, 0x00, 0x00, 0x00, };
//		list.add(ints);
//
//		ints = new int[] { 0x08, 0x00, 0xA0, 0x0A, 0x08, 0x0A, 0xDF, 0x5A, 0xA5, 0x11, 0xF0, 0x48, 0x69, 0x77, 0x6F,
//				0x72, 0x6C, 0x64, 0x2D, 0x32, 0x30, 0x31, 0x36, 0x30, 0x33, 0x32, 0x35, 0x4D, 0xE6, 0x5A, 0xA5, 0x11,
//				0xF0, 0x48, 0x69, 0x77, 0x6F, 0x72, 0x6C, 0x64, 0x2D, 0x32, 0x30, 0x31, 0x36, 0x30, 0x33, 0x32, 0x35,
//				0x4D, 0xE6, 0x5A, 0xA5, 0x14, 0x1F, 0x41, 0x42, 0x43, 0x44, 0x2D, 0x61, 0x62, 0x63, 0x64, 0x2B, 0x31,
//				0x32, 0x33, 0x34, 0x21, 0x3F, 0x5A, 0x59, 0x58, 0x00, 0x53, 0x5A, 0xA5, 0x14, 0x1F, 0x41, 0x42, 0x43,
//				0x44, 0x2D, 0x61, 0x62, 0x63, 0x64, 0x2B, 0x31, 0x32, 0x33, 0x34, 0x21, 0x3F, 0x5A, 0x59, 0x58, 0x00,
//				0x53 };
//		list.add(ints);
//		ints = new int[] { 0x5A, 0xA5, 0x11, 0xF0, 0x48, 0x69, 0x77, };
//
//		list.add(ints);
//		ints = new int[] { 0x6F, 0x72, 0x6C, 0x64, 0x2D, 0x32, 0x30, 0x31, 0x36, 0x30, 0x33, 0x32, 0x35, 0x4D, 0xE6 };
//
//		list.add(ints);
//		ints = new int[] { 0x5A, 0xA5, 0x0A, 0x12, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x00, 0x0A, 0x08, 0x0A, 0x5F,
//				0x5A, 0xA5, 0x0A, 0x12, 0x00, 0x00, };
//		list.add(ints);
//		ints = new int[] { 0x00, 0x00, 0x08, 0x00, 0x00, 0x0A, 0x08, 0x0A, 0x3F, 0x5A, 0xA5, 0x0A, 0x12, 0x00, 0x00,
//				0x80, 0x00, 0x08, 0x00, 0x00, 0x0A, 0x08, 0x0A, 0xBF, 0x5A, 0xA5, 0x0A, 0x12, 0x00, 0x00, 0x00, 0x00,
//				0x08, 0x00, 0x00, 0x0A, };
//		list.add(ints);
//		ints = new int[] { 0x08, 0x0A, 0x3F, 0x5A, 0xA5, 0x0A, 0x12, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x0A,
//				0x08, 0x0A, 0x47, 0x5A, 0xA5, 0x0A, 0x12, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x0A, 0x08, 0x0A,
//				0x3F, 0x5A, 0xA5, 0x0A, };
//		list.add(ints);
//		ints = new int[] { 0x12, 0x00, 0x00, 0x00, 0x00, 0x08, 0x80, 0x00, 0x0A, 0x08, 0x0A, 0xBF, 0x5A, 0xA5, 0x0A,
//				0x12, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x0A, 0x08, 0x0A, 0x3F, 0x5A, 0xA5, 0x0A, 0x12, 0x00,
//				0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x0A, 0x08, 0x0A, 0x5F };
//		list.add(ints);

		for (int i = 0; i < 1; i++) {
			for (int[] is : list) {
				try {

					formatClass.onReceiver(is);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

	}

}
